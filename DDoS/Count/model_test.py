# -*- coding: utf-8 -*-
"""test파일의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z3maZWKAO95lE552XB5l8g7t3Kq_QHTC
"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import numpy as np
import pandas as pd

df = pd.read_csv('C:/Users/admin/Documents/code/ddos.csv', sep = ",", low_memory=False)


df

df1 =  pd.read_csv('C:/Users/admin/Documents/code/0903normal.csv', sep = ",", low_memory=False)

df1

df1 = df1.drop([df1.columns[0]], axis=1)

J = df1.copy()

J = J.sample(frac=0.1)

J = J.sample(frac=0.1)

J = J[['Fwd Header Len', 'Tot Fwd Pkts', 'Fwd Seg Size Avg',
             'Subflow Fwd Byts', 'Init Bwd Win Byts', 'Fwd Pkt Len Std', 'Flow IAT Std',
            'Bwd IAT Min', 'Bwd Seg Size Avg', 'ACK Flag Cnt', 'Tot Bwd Pkts', 'Bwd Pkt Len Mean', 'Pkt Len Mean',
         'Pkt Len Max', 'Subflow Bwd Pkts', 'Flow IAT Min', 'TotLen Bwd Pkts', 'Bwd Pkt Len Std', 'Flow IAT Max', 'Flow Duration', 'Fwd IAT Tot', 'DDOS']]

J

K = df.copy()

K = K[['Fwd Header Len', 'Tot Fwd Pkts', 'Fwd Seg Size Avg',
             'Subflow Fwd Byts', 'Init Bwd Win Byts', 'Fwd Pkt Len Std', 'Flow IAT Std',
            'Bwd IAT Min', 'Bwd Seg Size Avg', 'ACK Flag Cnt', 'Tot Bwd Pkts', 'Bwd Pkt Len Mean', 'Pkt Len Mean',
         'Pkt Len Max', 'Subflow Bwd Pkts', 'Flow IAT Min', 'TotLen Bwd Pkts', 'Bwd Pkt Len Std', 'Flow IAT Max', 'Flow Duration', 'Fwd IAT Tot', 'DDOS']]

test = pd.concat([J, K])

test = test.sample(frac=1)

test





x = test.drop(['DDOS'], axis =1)
y = test['DDOS']
test_dataset = test.sample(frac=0.3)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)

print(x_train.shape)

print(x_test.shape)
print(y_train.shape)

print(y_test.shape)

y_train = y_train.to_numpy()
y_test = y_test.to_numpy()

y_train.shape

y_test.shape

y_train = y_train.reshape(-1,1)
y_test = y_test.reshape(-1,1)

y_train.shape

y_test.shape

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

y_test

y_test = pd.DataFrame(y_test)

y_train = pd.DataFrame(y_train)

y_test

x_train = np.array(x_train)
y_train = np.array(y_train)

x_test = np.array(x_test)
y_test = np.array(y_test)

x_train.shape

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)

x_train = np.reshape(x_train, (3740, 1, 21))
x_test = np.reshape(x_test, (1604, 1, 21))

x_train.shape

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM
from tensorflow.compat.v1.keras.layers import CuDNNLSTM

# 2. 모델 불러오기
from keras.models import load_model

import tensorflow as tf

# model = tf.keras.models.load_model('C:/Users/admin/Desktop/data-1/22000-0.0034.h5')

model = tf.keras.models.load_model('C:/Users/admin/Desktop/Jdata1/3000-0.0005.h5')
model.summary()

# loss,acc = model.evaluate(x_test, y_test, verbose = 1)

# load_model = tf.keras.models.load_model('/gdrive/MyDrive/0829.h5')

prediction = model.predict(x_test)

prediction[10]

threshold = 0.5

prediction_2 = np.where(prediction >= threshold, 1, prediction)
prediction_2 = np.where(prediction_2 < threshold, 0, prediction_2)

prediction_2

cm = confusion_matrix(y_test, prediction_2)
print(cm)

print("True Negative TN : ", cm[0][0])

print("False Positive FP : ", cm[0][1])

print("False Negative FN : ", cm[1][0])

print("True Positive TP : ", cm[1][1])

print("Detection Rate is : ", (cm[1][1])/(cm[1][1]+cm[1][0])*100)

print("False Alarm Rate is : ", (cm[0][1])/(cm[0][1]+cm[0][0])*100)

print(classification_report(y_test, prediction_2, digits=5))

loss,acc = model.evaluate(x_test, y_test, verbose = 1)





